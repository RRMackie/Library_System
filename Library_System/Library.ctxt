#BlueJ class context
comment0.target=Library
comment0.text=\r\n\ The\ Library\ Class\ stores\ all\ book/e-book\ related\ resources\ in\ an\ arraylist,\r\n\ simulating\ a\ library\ that\ holds\ resources\ such\ as\ physical\ books,\ electronic\r\n\ books\ and\ online\ journals.\r\n\r\n\ @author\ Robert\ Mackie\r\n\ @version\ 1.6\ (29/11/23)\r\n
comment1.params=
comment1.target=Library()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Library\r\n
comment10.params=
comment10.target=java.util.ArrayList\ getListOfResources()
comment10.text=\r\n\ Return\ the\ ArrayList\ of\ Resources\ added\ to\ the\ Library\r\n\ \r\n\ @\ return\ ArrayList\ \ \ \ The\ arrraylist\ containing\ the\ resources\ objects\r\n
comment11.params=resource
comment11.target=void\ addResource(Resource)
comment11.text=\r\n\ Add\ an\ instance\ of\ a\ resource\ to\ the\ library.\ The\ conditional\r\n\ statment\ checks\ to\ see\ if\ the\ resource\ is\ already\ in\ the\ library\r\n\ before\ adding.\ If\ there\ is\ already\ a\ copy\ of\ the\ resource\ then\r\n\ the\ number\ of\ copies\ is\ updated\ to\ reflect\ this.\r\n\r\n\ @param\ \ resource\ The\ resource\ object\ to\ be\ added\ to\ the\ library.\r\n\ \r\n
comment12.params=resource\ LibraryMember
comment12.target=void\ borrowBook(Resource,\ User)
comment12.text=\r\n\ A\ method\ that\ allows\ a\ library\ member\ to\ borrow\ a\ book\ from\ the\ library.\r\n\ \r\n\ The\ method\ takes\ a\ Library\ Member\ and\ Resource\ input\ then\ adds\ the\ resource\r\n\ to\ the\ borrowed\ arraylist\ in\ the\ Library\ Class\ and\ the\ onloan\ ArrayList\r\n\ in\ the\ LIbrary\ Members\ class.\ \r\n\ \r\n\ The\ method\ first\ checks\ if\ the\ resource\ is\ \r\n\ an\ instance\ of\ a\ book,\ if\ the\ user\ is\ a\ Library\ Member,\ if\ there\ is\ a\ copy\r\n\ available,\ if\ the\ Library\ Membership\ is\ true,\ and\ if\ there\ is\ not\ already\r\n\ a\ library\ member\ borrowing\ it.\r\n\ \r\n\ If\ the\ User\ is\ a\ guest\ member\ then\ they\ are\ not\ allowed\ to\ borrow\ books\ as\ \r\n\ it\ is\ a\ member\ only\ privilege.\r\n\r\n\ @param\ \ resource\ Resource\ \ \ \ The\ resource\ to\ be\ added\r\n\ @param\ \ user\ Library\ Member\ \ \ \ The\ resource\ object\ to\ be\ borrowed\r\n\ \r\n
comment13.params=resource\ LibraryMember\ damage\ updateDamage
comment13.target=void\ returnBook(Resource,\ User,\ boolean,\ java.lang.String)
comment13.text=\r\n\ A\ method\ that\ allows\ a\ library\ member\ to\ return\ a\ book\ from\ the\ library.\r\n\ The\ method\ takes\ a\ Library\ Member\ and\ Resource\ input\ then\ removes\ the\ resource\r\n\ from\ the\ borrowed\ arraylist\ in\ the\ Library\ Class\ and\ the\ onloan\ ArrayList\r\n\ in\ the\ LIbrary\ Members\ class.\ The\ method\ first\ checks\ if\ the\ resource\ is\ \r\n\ an\ instance\ of\ a\ book,\ if\ the\ user\ is\ a\ Library\ Member,\ if\ there\ is\ a\ copy\r\n\ available,\ if\ the\ Library\ Membership\ is\ true,\ and\ there\ isn't\ currently\ a\r\n\ libraryMember\ borrowing\ it.\r\n\ \r\n\r\n\ @param\ \ Resource\ resource\ \ \ \ The\ resource\ object\ to\ be\ returned.\r\n\ @param\ \ user\ Library\ Member\ \ \ \ The\ the\ library\ member\ that\ is\ returning\ the\ resource.\r\n\ @param\ \ boolean\ damage\ \ \ \ \ If\ there\ is\ damage\ then\ it\ should\ be\ true,\ else\ then\ false.\r\n\ @param\ String\ updateDamage\ \ \ \ If\ there\ is\ damage\ then\ describe\ it,\ else\ use\ "".\r\n\ \r\n
comment14.params=author
comment14.target=void\ addAuthor(Author)
comment14.text=\r\n\ A\ method\ to\ add\ an\ Author\ object\ to\ the\ Library.\r\n\ The\ method\ checks\ to\ see\ if\ the\ Author\ already\ exists\ within\ the\ Library\ before\r\n\ attempting\ to\ add\ the\ object.\r\n\r\n\ @param\ \ Author\ The\ author\ object\ to\ be\ added\ to\ the\ library.\r\n\ \r\n
comment15.params=
comment15.target=void\ printAvailableResources()
comment15.text=\r\n\ A\ method\ to\ print\ the\ details\ of\ only\ available\ resources\ added\ to\ the\ library\r\n\ (i.e\ not\ borrowed)\ and\ the\ print\ method\ is\ able\ to\ differentiate\ \r\n\ between\ available\ individual\ resources\ in\ each\ list\ and\ prints\ the\ \r\n\ instances\ to\ the\ terminal.\r\n
comment16.params=
comment16.target=void\ printPhysicalResources()
comment16.text=\r\n\ A\ method\ to\ print\ the\ details\ of\ only\ physical\ book\ objects\ added\ to\ the\ library\r\n\ and\ print\ out\ their\ details.\r\n
comment17.params=
comment17.target=void\ printElectronic()
comment17.text=\r\n\ A\ method\ to\ print\ the\ details\ of\ all\ electronic\ resources\ added\ to\ the\ library\r\n\ (E-Books\ and\ Journals)\ and\ print\ their\ details.\r\n
comment2.params=
comment2.target=void\ printLibraryDetails()
comment2.text=\r\n\ A\ method\ to\ print\ the\ details\ of\ each\ resource\ that\ is\ added\ to\ the\ library\r\n\ and\ the\ print\ method\ is\ able\ to\ differentiate\ between\ individual\ subclass\r\n\ instances\ (Book,\ Ebook,\ Journal)of\ resources\ in\ each\ list\ and\ \r\n\ prints\ the\ instance\ to\ the\ terminal.\r\n
comment3.params=resource
comment3.target=boolean\ checkLibrary(Resource)
comment3.text=\r\n\ Check\ if\ Library\ currently\ contains\ a\ specific\ resource\r\n\ \r\n\ @\ param\ Resource\ resource\ \ \ \ The\ resource\ that\ you\ are\ checking\ for\r\n
comment4.params=resources\ newName
comment4.target=void\ changeAuthorFirstName(Resource,\ java.lang.String)
comment4.text=\r\n\ A\ method\ to\ edit\ an\ author\ objects\ first\ name.\r\n\ The\ method\ first\ checks\ if\ their\ is\ an\ Author\ Object\ associated\ with\ the\ resource\r\n\ before\ allowing\ any\ change.\r\n\ \r\n\ @param\ \ \ Resource\ resources\ \ \ \ The\ resource\ object\ the\ Author\ is\ attributed\ to\r\n\ @param\ \ \ String\ newName\ \ \ \ The\ new\ first\ name\ for\ the\ Author\ to\ be\ changed\ to\r\n
comment5.params=searchString
comment5.target=void\ searchForTitle(java.lang.String)
comment5.text=\r\n\ Search\ through\ the\ library\ ArrayList\ for\ a\ specific\ resource\ title.\r\n\ When\ printing\ out\ the\ number\ of\ resources\ matching\ the\ search\ we\ also\ take\r\n\ into\ account\ the\ number\ of\ copies\ of\ the\ resource.\r\n\ \r\n\ @param\ \ String\ searchString\ \ \ \ The\ book\ title\ you\ are\ searching\ for\r\n
comment6.params=searchString
comment6.target=void\ searchForAuthor(java.lang.String)
comment6.text=\r\n\ Search\ through\ the\ library\ ArrayList\ for\ a\ specific\ author\ by\ last\ name.\r\n\ The\ method\ will\ print\ out\ the\ information\ of\ the\ Author\ and\ the\ total\ \r\n\ number\ of\ resources\ they\ have\ associated\ with\ them.\ The\ search\ string\ also\r\n\ ignores\ case\ sensitive\ searches.\r\n\ \r\n\ @param\ \ String\ searchString\ \ \ \ The\ authors\ last\ name\ that\ you\ are\ searching\ for\r\n
comment7.params=resource
comment7.target=void\ removeResource(Resource)
comment7.text=\r\n\ This\ method\ removes\ a\ specific\ resource\ from\ the\ library.\r\n\ The\ method\ checks\ if\ the\ resource\ is\ in\ the\ library\ and\ if\ it\ is\r\n\ available\ to\ be\ removed\ (i.e\ not\ currently\ being\ borrowed)\r\n\r\n\ @param\ Resource\ resource\ \ \ \ The\ resource\ object\ you\ want\ to\ remove\r\n
comment8.params=index
comment8.target=void\ removeResource(int)
comment8.text=\r\n\ This\ method\ removes\ a\ resource\ from\ the\ library\ at\ a\ specified\ index.\r\n\ The\ method\ checks\ if\ the\ resource\ is\ in\ the\ library\ and\ if\ it\ is\r\n\ available\ to\ be\ removed\ (i.e\ not\ currently\ being\ borrowed)\r\n\r\n\ @param\ int\ index\ \ \ \ The\ resource\ you\ wish\ to\ remove\ from\ the\ library\r\n
comment9.params=
comment9.target=int\ getNumberOfResources()
comment9.text=\r\n\ Return\ the\ number\ of\ total\ number\ of\ resources\ added\ to\ the\ Library\r\n\ \r\n\ @return\ int\ resources.size\ \ \ \ The\ total\ size\ of\ the\ resources\ list\r\n
numComments=18
